SES - email - 3rd party service

Different to HTTP - no http involved for email

Part3 - change password - sent by email

3rd party also for getting spam filter

AWS offers email service - SES (simple email service)

Similar to uploading image to AWS - sendEmail object instead of putObject

Similar - can use own AWS or Spiced account

Single user email and bulk emails to multiple recipients

"Transactional" email - email to one user - e.g. order confirmation in shopping

"Notification" email - e.g. updates about bid on eBay

Bulk emails are "Promotional" emails

For Spiced users - same credentials as before - secrets.json file from ImageBoard - included in .gitignore of SocialNetwork

Email addresses assigned for all students - link "some restrictions" in SES notes under AWS SES - this is FROM email address

TO email address - only two possible - FROM email address and our personal email address registered for Spiced (my gmail) - restrictions set by David

funky.chicken@spicedling.email - left of @ is local part - right is server part

Label part - funky.chicken+abcde - +abcde is label - will go to same address without label

Email received on Slack for newly assigned email address - already setup by David

Steps for setting up SES for own AWS account holders - also in notes

Region for Spiced account users - "eu-west-1" - Europe (Ireland) - need for sending email everytime

Most code given - copy/paste - ses.js alongside server.js - sendEmail function with template - uses promises - modify as required - e.g. source, destination, message, subject -  body of message can be text or html type - text type for project

Make above function generic instead of hard code - TO address, body, subject sent as args - remove then-catch part for function - only return promise and handle rest in server.js - modified code included in notes

Secret code with forgot password email to user

Part3 - new component - ResetPassword - link in login page - 3 stages
	1. Submit email address - post req to check registered email - generates secret code - include code in email sent - store code in database
	2. Submit code and new password - another post req - send email, code, new pass - server uses email to find code - match code submitted and database - hash new pass and replace in database
	3. Success page with link to login page - login with new pass

Simplified typing code on page for reset instead of sending url with email

Next steps added in notes - sample code for component ResetPassword

crypto-random-string package/library installed - require package as crs - crs({length:6}); - setting length of secret code

Secret code cannot be in cookie or server response! - has to be in database - redis would be good example as code valid for 10mins. - create new table with email, code, time

Current time important - limit codes valid for 10mins. only - example query code - ignore all codes higher than 10mins. old

Keeping all old codes is also good feature - tells how many times users forget passwords - statistics

Can use UPSERT instead of INSERT for codes - only one code for one email address in table!

Another option - order by ID in DESC and LIMIT 1 to use the latest code generated for one email/user

Use this.state in component to decide between 3 different stages of reset - e.g. step:1 - if-else in render function using step value check - change this.state step value for successful responses - to change render automatically between the stages - steps 1,2,3 - similar way using conditional rendering using step value and &&
