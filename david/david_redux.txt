Redux - David - 17.03.21

- Redux JS library - managing application state - global state container

*** Time to consider final project - link added #fennel about requirements (read) - talk to any teacher about idea between ending SN and starting final project - to decide if idea is too small or too big to finish in 1 week! - SN wrap up next Thursday ***

- Manage states of all components centrally in a global place - till now states were local ie. only within components

- Could be chaotic having everything together!

- "Single source of truth" so far was App - everything about user was passed to children and grandchildren of App when required

- Redux works also as single source of truth - any component can get info from it when required

- Redux most popular to be used with React - also Vue and Redux itself

- Usually Redux used for everything in React - for SN project part9, 10 will use Redux only - previous code stays the same

- Refer notes - big object of states used in different components - user, foundUsers, otherUser, etc. - global state object

- Action object - to change any state - must have type and new value

- Functions that create Action objects - Action creaters

- Reducers - funcs that are passed current state and an action - this actually changes the state - example code - func myReducer(state,action)

- Reducer must be a "pure" func - avoid mutation - no change to values passed as args - eg. return a*b does not change a or b - also should not depend on anything other than args passed eg. return a*b*Data.now() is impure as it uses Date.now() - Reducer not allowed to mutate or change state - creating new state object similar to original one w/o changing original

- Using (...) spread operator to clone part of state unchanged and include changes needed for certain action - eg. update bio, show uploader, etc.

- Store object - central interface of Redux - method dispatch starts the cycle - flow diagram in notes starting with store.dispatch(createAction());

- Redux middleware - similar to Express middleware - code added in middle of process to influence outcome - happens between store.dispatch and reducer (diagram) - do something before action reaches reducer - state in client reflects state in server (postgres) - redux-promise middleware will be used

- Integration with React - react-redux library - boiler-plate things in notes

- Hooks - useDispatch, useSelector - read notes! (zzz...) - "hot or not" app - spicyhotornot.herokuapp.com - looking at code - will push to branch sohot as reference for encounter tomoro

- overreacted.io - blog reference
